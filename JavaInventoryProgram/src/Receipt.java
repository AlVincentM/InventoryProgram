
import java.awt.event.KeyEvent;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Vincent
 */
public class Receipt extends javax.swing.JFrame {

    double total = 0;
    private Item item[] = new Item[100];

    // error handling
    final int NOITEMS = 0;
    final int NOCASHRECIEVED = 1;
    final int INSUFFICIENTPAYMENT = 2;
    
    DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
    LocalDateTime now = LocalDateTime.now();

    class TransactionException extends Exception {

        String errStr; // describes the error 

        public TransactionException(String str) {
            errStr = str;
        }

        public String toString() {
            return errStr;
        }
    }

    LinkedList list = new LinkedList();

    /**
     * Creates new form Receipt
     */
    public Receipt() {
        initComponents();
        try {
            ItemRecord itemRecord = new ItemRecord();
        } catch (FileNotFoundException e) {

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titlePanel = new javax.swing.JPanel();
        buttonsPanel = new javax.swing.JPanel();
        itemNameInput = new javax.swing.JTextField();
        itemNameLabel = new javax.swing.JLabel();
        priceInput = new javax.swing.JTextField();
        priceLabel = new javax.swing.JLabel();
        quantityLabel = new javax.swing.JLabel();
        quantityInput = new javax.swing.JSpinner();
        addItemButton = new javax.swing.JButton();
        deleteItemButton = new javax.swing.JButton();
        cashOutButton = new javax.swing.JButton();
        cashReceiveInput = new javax.swing.JTextField();
        cashReceivedLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        itemTable = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        receiptLog = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        inventoryButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buttonsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        itemNameInput.setText("Item name...");
        itemNameInput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemNameInputMouseClicked(evt);
            }
        });
        itemNameInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemNameInputActionPerformed(evt);
            }
        });
        itemNameInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                itemNameInputKeyPressed(evt);
            }
        });

        itemNameLabel.setText("Item:");

        priceInput.setEditable(false);
        priceInput.setText("Price...");

        priceLabel.setText("Price:");

        quantityLabel.setText("Quantity:");

        quantityInput.setModel(new javax.swing.SpinnerNumberModel(1, 1, 999, 1));

        addItemButton.setText("Add");
        addItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemButtonActionPerformed(evt);
            }
        });

        deleteItemButton.setText("Delete");
        deleteItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteItemButtonActionPerformed(evt);
            }
        });

        cashOutButton.setText("CASH OUT");
        cashOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cashOutButtonActionPerformed(evt);
            }
        });

        cashReceiveInput.setText("Enter Amount...");
        cashReceiveInput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cashReceiveInputMouseClicked(evt);
            }
        });
        cashReceiveInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cashReceiveInputKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cashReceiveInputKeyTyped(evt);
            }
        });

        cashReceivedLabel.setText("Cash Recieved:");

        javax.swing.GroupLayout buttonsPanelLayout = new javax.swing.GroupLayout(buttonsPanel);
        buttonsPanel.setLayout(buttonsPanelLayout);
        buttonsPanelLayout.setHorizontalGroup(
            buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(priceInput, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(itemNameInput)
                    .addComponent(cashOutButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addItemButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(quantityInput)
                    .addGroup(buttonsPanelLayout.createSequentialGroup()
                        .addGroup(buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deleteItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(quantityLabel)
                            .addComponent(itemNameLabel)
                            .addComponent(priceLabel)
                            .addComponent(cashReceiveInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cashReceivedLabel))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        buttonsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cashReceiveInput, deleteItemButton});

        buttonsPanelLayout.setVerticalGroup(
            buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(itemNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(itemNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(priceLabel)
                .addGap(7, 7, 7)
                .addComponent(priceInput, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(quantityLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(quantityInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addItemButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteItemButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                .addComponent(cashReceivedLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cashReceiveInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cashOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        buttonsPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {addItemButton, cashReceiveInput, deleteItemButton, itemNameInput, priceInput, quantityInput});

        itemTable.setAutoCreateRowSorter(true);
        itemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Item Name", "Quantity", "Unit Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        itemTable.setDragEnabled(true);
        itemTable.setFillsViewportHeight(true);
        jScrollPane2.setViewportView(itemTable);

        receiptLog.setEditable(false);
        receiptLog.setColumns(20);
        receiptLog.setRows(5);
        receiptLog.setText("\n\t    Tesla Tech Electronics Inc." + "\n\t          Legazpi City, Albay" + "\n\n\t         " + dtf.format(now) +  "\n\n --------------------------------------------------------------------------------");
        jScrollPane1.setViewportView(receiptLog);

        titleLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Tesla Tech Electronics Inc.");
        titleLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        inventoryButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        inventoryButton.setText("Inventory");
        inventoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inventoryButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(inventoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 974, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inventoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout titlePanelLayout = new javax.swing.GroupLayout(titlePanel);
        titlePanel.setLayout(titlePanelLayout);
        titlePanelLayout.setHorizontalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, titlePanelLayout.createSequentialGroup()
                .addComponent(buttonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(titlePanelLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        titlePanelLayout.setVerticalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titlePanelLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1)
                    .addGroup(titlePanelLayout.createSequentialGroup()
                        .addComponent(buttonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(titlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 1167, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(titlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void itemNameInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemNameInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_itemNameInputActionPerformed

    private void inventoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inventoryButtonActionPerformed
        // TODO add your handling code here:
        try {
            Inventory inventory = new Inventory();
            inventory.setVisible(true);
        } catch (FileNotFoundException e) {
        }
        this.setVisible(false);
    }//GEN-LAST:event_inventoryButtonActionPerformed

    private void addItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemButtonActionPerformed
        // TODO add your handling code here:
        addItem();
    }//GEN-LAST:event_addItemButtonActionPerformed

    private void itemNameInputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemNameInputMouseClicked
        // TODO add your handling code here:
        itemNameInput.setText("");
    }//GEN-LAST:event_itemNameInputMouseClicked

    private void itemNameInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemNameInputKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addItem();
        }
    }//GEN-LAST:event_itemNameInputKeyPressed

    private void deleteItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteItemButtonActionPerformed
        // TODO add your handling code here:
        deleteItem();
    }//GEN-LAST:event_deleteItemButtonActionPerformed

    private void cashReceiveInputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cashReceiveInputMouseClicked
        // TODO add your handling code here:
        cashReceiveInput.setText("");
    }//GEN-LAST:event_cashReceiveInputMouseClicked

    private void cashReceiveInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cashReceiveInputKeyPressed
        // TODO add your handling code here:
        //String value = inputCashReceived.getText();
        String totalToDisplay = Double.toString(total);
        if (evt.getKeyChar() >= '0' && evt.getKeyChar() <= '9' || evt.getKeyChar() == '.' || evt.getKeyCode() == 8 || evt.getKeyCode() == 144) {

        } else if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            //inputCashReceived.addActionListener(new ListenToCashOut());
            try {
                String cash = cashReceiveInput.getText();
                double cashRecieved = Double.parseDouble(cash);
                double change = cashRecieved - total;

                try {
                    if (change < 0.0) {
                        handleErr(INSUFFICIENTPAYMENT);
                        return;
                    }
                    else {
                        printReceipt();
                        receiptLog.append("\nCash:" + "\t\t\t" + cashReceiveInput.getText());
                        receiptLog.append("\nChange:" + "\t\t\t" + change);
                    }
                } catch (TransactionException e) {
                     JOptionPane.showMessageDialog(null, "Insufficient Payment");
                }
            } catch (NumberFormatException numberFormatErr) {
                try {
                    handleErr(NOCASHRECIEVED);
                } catch (TransactionException e) {
                     JOptionPane.showMessageDialog(null, "No cash received");
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Invalid input");
        }
    }//GEN-LAST:event_cashReceiveInputKeyPressed

    private void handleErr(int error) throws TransactionException {
        String[] err = {"No items purchased", "No cash recieved",
            "Insufficient payment"};
        throw new TransactionException(err[error]);
    }

    private void cashReceiveInputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cashReceiveInputKeyTyped

    }//GEN-LAST:event_cashReceiveInputKeyTyped

    private void cashOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cashOutButtonActionPerformed
        try {
            cashOut();
        } catch (TransactionException transanctionE) {
            JOptionPane.showMessageDialog(null, transanctionE);
        }
    }//GEN-LAST:event_cashOutButtonActionPerformed

    /*
    *   invoked is cash out is clicked
    */
    public void cashOut() throws TransactionException {
        try {
            String cash = cashReceiveInput.getText();
            double cashRecieved = Double.parseDouble(cash);
            double change = cashRecieved - total;

            if (itemTable.getRowCount() == 0) {
                handleErr(NOITEMS);
                return;
            } else if (change < 0.0) {
                handleErr(INSUFFICIENTPAYMENT);
                return;
            } else {
                printReceipt();
                receiptLog.append("\nCash:" + "\t\t\t" + cashReceiveInput.getText());
                receiptLog.append("\nChange:" + "\t\t\t" + change);
                receiptLog.append("\n\n --------------------------------------------------------------------------------");
                receiptLog.append("\n                 THIS SERVES AS AN OFFICIAL RECEIPT." + "\n            BRING THIS RECEIPT IN CASE OF EXCHANGE\n                                        OF PRODUCTS" + "\n                          THANK YOU AND COME AGAIN!");
                
                int rows = itemTable.getModel().getRowCount();
                for(int i = 0; i < rows; i++) {
                    for(int j = 0; j < 100; j++) {
                        String itemName = itemTable.getModel().getValueAt(i, 1).toString();
                        String quantity = itemTable.getModel().getValueAt(i, 2).toString();
                        if(itemName.equalsIgnoreCase(item[j].getItemName())) {
                            int newStocks = item[j].getItemStock() - Integer.parseInt(quantity);
                            item[j].setItemStock(newStocks);
                        }
                    }
                }
                
                try {
                    updateRecord();
                }
                catch(Exception e) {
                    
                }
                


            }
        } catch (NumberFormatException numberFormatErr) {
            handleErr(NOCASHRECIEVED);
        }
    }
    
    /*
    * updates inventoryRecords.txt after every transaction
    */
    private void updateRecord() throws Exception {
        int k = 0;

        BufferedWriter writer1 = new BufferedWriter(new FileWriter("inventoryRecords.txt"));

        int itemCode = item[k].getItemCode();
        String itemName = item[k].getItemName();
        int itemStock = item[k].getItemStock();
        double itemPrice = item[k].getItemPrice();
        k++;

        writer1.write(itemCode + ";" + itemName + ";" + itemStock + ";" + itemPrice);
        writer1.close();

        BufferedWriter writer2 = new BufferedWriter(new FileWriter("inventoryRecords.txt", true));
        while (item[k].getItemCode() != 0) {
            itemCode = item[k].getItemCode();
            itemName = item[k].getItemName();
            itemStock = item[k].getItemStock();
            itemPrice = item[k].getItemPrice();
            k++;

            writer2.append("\n" + itemCode + ";" + itemName + ";" + itemStock + ";" + itemPrice);
        }
        writer2.close();
        
        JOptionPane.showMessageDialog(null, "Transaction Successful!");
        
        DefaultTableModel model = (DefaultTableModel) itemTable.getModel();
        int rows = model.getRowCount();
        for (int i = rows - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        total = 0;
    }
    
    /*
    *   Invoked if add item button is clicked
     */
    public void addItem() {
        String searchQuery = itemNameInput.getText();
        int itemCode = 0;
        String itemName = "";
        int itemQuantity = (Integer) quantityInput.getValue();
        double itemPrice = 0.0;
        boolean itemIsFound = false;

        for (int i = 0; i < 100; i++) {
            if (searchQuery.equalsIgnoreCase(item[i].getItemName()) || searchQuery.equals(Integer.toString(item[i].getItemCode()))) {
                itemIsFound = true;
                itemCode = item[i].getItemCode();
                itemName = item[i].getItemName();
                itemPrice = item[i].getItemPrice();
                String price = Double.toString(itemPrice);
                priceInput.setText(price);
            }
        }

        if (itemIsFound) {

            DefaultTableModel model = (DefaultTableModel) itemTable.getModel();
            model.addRow(new Object[]{new Integer(itemCode), new String(itemName), new Integer(itemQuantity), new Double(itemPrice)});
            total = total + (itemPrice * itemQuantity);
            String totalToDisplay = Double.toString(total);
            // totalText.setText("Total: " + totalToDisplay);
            printReceipt();
        } else if (searchQuery.equals("") || searchQuery.equals("Item name...")) {
        } else {
            JOptionPane.showMessageDialog(null, "Item does not exist!");
        }
    }

    /*
     *  Invoked if delete item button is clicked
     */
    public void deleteItem() {
        DefaultTableModel model = (DefaultTableModel) itemTable.getModel();
        int numRows = itemTable.getSelectedRows().length;
        int selectedRow = itemTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "No item selected, select an item to remove.");
        } else {
            for (int i = 0; i < numRows; i++) {
                selectedRow = itemTable.getSelectedRow();
                String itemQuantity = itemTable.getModel().getValueAt(selectedRow, 2).toString();
                String itemPrice = itemTable.getModel().getValueAt(selectedRow, 3).toString();
                total = total - (Double.parseDouble(itemPrice) * Integer.parseInt(itemQuantity));
                String totalToDisplay = Double.toString(total);
                // totalText.setText("Total: " + totalToDisplay);
                model.removeRow(itemTable.getSelectedRow());
                printReceipt();
            }
        }
    }

    public void printReceipt() {
        receiptLog.setText("\n\t    Tesla Tech Electronics Inc." + "\n\t          Legazpi City, Albay");
        now = LocalDateTime.now();
        receiptLog.append("\n\n\t         " + dtf.format(now));
        receiptLog.append("\n\n --------------------------------------------------------------------------------");
        receiptLog.append("\n Item Code \tItem Name \tQuantity \tUnit Price");

        String itemCode;
        String itemName;
        String quantity;
        String unitPrice;

        int rows = itemTable.getModel().getRowCount();
        for (int i = 0; i < rows; i++) {
            itemCode = itemTable.getModel().getValueAt(i, 0).toString();
            itemName = itemTable.getModel().getValueAt(i, 1).toString();
            quantity = itemTable.getModel().getValueAt(i, 2).toString();
            unitPrice = itemTable.getModel().getValueAt(i, 3).toString();

            receiptLog.append("\n " + itemCode + "\t" + itemName + "\t" + quantity + "\t" + unitPrice);
        }

        receiptLog.append("\n\n --------------------------------------------------------------------------------");
        receiptLog.append("\n TOTAL:" + "\t\t\t" + total);
    }

    class ItemRecord {

        ItemRecord() throws FileNotFoundException {
            int i = 0;
            Scanner scan = new Scanner(new FileReader("inventoryRecords.txt"));

            String tempString = "";

            for (i = 0; i < 100; i++) {
                item[i] = new Item();
            }
            i = 0;
            while (scan.hasNextLine()) {
                tempString = scan.nextLine();
                String temp[] = tempString.split(";");

                int itemCode = Integer.parseInt(temp[0]);
                String itemName = temp[1];
                int itemStock = Integer.parseInt(temp[2]);
                double itemPrice = Double.parseDouble(temp[3]);

                item[i].setItemCode(itemCode);
                item[i].setItemName(itemName);
                item[i].setItemStock(itemStock);
                item[i].setItemPrice(itemPrice);
                i++;
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Receipt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Receipt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Receipt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Receipt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Receipt().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addItemButton;
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JButton cashOutButton;
    private javax.swing.JTextField cashReceiveInput;
    private javax.swing.JLabel cashReceivedLabel;
    private javax.swing.JButton deleteItemButton;
    private javax.swing.JButton inventoryButton;
    private javax.swing.JTextField itemNameInput;
    private javax.swing.JLabel itemNameLabel;
    private javax.swing.JTable itemTable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField priceInput;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JSpinner quantityInput;
    private javax.swing.JLabel quantityLabel;
    private javax.swing.JTextArea receiptLog;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JPanel titlePanel;
    // End of variables declaration//GEN-END:variables
}

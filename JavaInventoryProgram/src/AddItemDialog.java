
import java.awt.event.KeyEvent;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.Scanner;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Vincent
 */



public class AddItemDialog extends javax.swing.JDialog {
    
    LinkedList list = new LinkedList();
    final int EMPTYFIELDS = 0;

    /**
     * Creates new form AddItemDialog
     */
    public AddItemDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelForAddItem = new javax.swing.JLabel();
        panelForAddItemContents = new javax.swing.JPanel();
        labelForItemNameInput = new javax.swing.JLabel();
        inputForItemName = new javax.swing.JTextField();
        labelForItemQuantity = new javax.swing.JLabel();
        spinnerForItemQuantity = new javax.swing.JSpinner();
        labelForUnitPrice = new javax.swing.JLabel();
        inputForUnitPrice = new javax.swing.JTextField();
        buttonToAdd = new javax.swing.JButton();
        buttonToCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        labelForAddItem.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        labelForAddItem.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelForAddItem.setText("Add Item");

        labelForItemNameInput.setText("Item Name:");

        inputForItemName.setText("Item Name...");
        inputForItemName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inputForItemNameMouseClicked(evt);
            }
        });

        labelForItemQuantity.setText("Quantity:");

        spinnerForItemQuantity.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        labelForUnitPrice.setText("Unit Price:");

        inputForUnitPrice.setText("Unit Price...");
        inputForUnitPrice.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inputForUnitPriceMouseClicked(evt);
            }
        });
        inputForUnitPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                inputForUnitPriceKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inputForUnitPriceKeyTyped(evt);
            }
        });

        buttonToAdd.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        buttonToAdd.setText("Add");
        buttonToAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonToAddActionPerformed(evt);
            }
        });

        buttonToCancel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        buttonToCancel.setText("Cancel");
        buttonToCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonToCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelForAddItemContentsLayout = new javax.swing.GroupLayout(panelForAddItemContents);
        panelForAddItemContents.setLayout(panelForAddItemContentsLayout);
        panelForAddItemContentsLayout.setHorizontalGroup(
            panelForAddItemContentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelForAddItemContentsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelForAddItemContentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputForItemName)
                    .addGroup(panelForAddItemContentsLayout.createSequentialGroup()
                        .addComponent(spinnerForItemQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputForUnitPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE))
                    .addGroup(panelForAddItemContentsLayout.createSequentialGroup()
                        .addGroup(panelForAddItemContentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelForItemNameInput)
                            .addGroup(panelForAddItemContentsLayout.createSequentialGroup()
                                .addComponent(labelForItemQuantity)
                                .addGap(138, 138, 138)
                                .addComponent(labelForUnitPrice)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panelForAddItemContentsLayout.createSequentialGroup()
                        .addComponent(buttonToAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonToCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        panelForAddItemContentsLayout.setVerticalGroup(
            panelForAddItemContentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelForAddItemContentsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelForItemNameInput)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputForItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelForAddItemContentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelForItemQuantity)
                    .addComponent(labelForUnitPrice))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelForAddItemContentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(inputForUnitPrice)
                    .addComponent(spinnerForItemQuantity, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(panelForAddItemContentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonToAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                    .addComponent(buttonToCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        panelForAddItemContentsLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {inputForItemName, spinnerForItemQuantity});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelForAddItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelForAddItemContents, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(labelForAddItem, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelForAddItemContents, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonToCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonToCancelActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_buttonToCancelActionPerformed

    private void inputForItemNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inputForItemNameMouseClicked
        // TODO add your handling code here:
        inputForItemName.setText("");
    }//GEN-LAST:event_inputForItemNameMouseClicked

    private void inputForUnitPriceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inputForUnitPriceMouseClicked
        // TODO add your handling code here:
        inputForUnitPrice.setText("");
    }//GEN-LAST:event_inputForUnitPriceMouseClicked

    private void buttonToAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonToAddActionPerformed
        // TODO add your handling code here
        int listLength = list.length();
        
        boolean doesExist = false;
        
        // Iterate through the list.
        for(int i = 0; i < listLength; i++) {
            String itemName = LinkedList.itemList[i].getItemName();
            String newItemName = inputForItemName.getText();
            
            if(newItemName.equalsIgnoreCase(itemName)) {
                doesExist = true;
            }
        }
        
        // check if new item is already  in the records
        if(doesExist) {
            JOptionPane.showMessageDialog(null, "Item does already exist");
        }
        else {
            try {
                if (inputForItemName.getText().equals("") || inputForItemName.getText().equals("Item Name...") || inputForUnitPrice.getText().equals("") || inputForUnitPrice.getText().equals("Unit Price...")) {
                    handleErr(EMPTYFIELDS);
                    return;
                }
                try {
                    initializeRecord();   
                } catch(FileNotFoundException fileErr) {
                     JOptionPane.showMessageDialog(null, "ERROR: Data file cannot be found");
                }
                
                String newItemName = inputForItemName.getText();
                String unitPrice = inputForUnitPrice.getText();
                double newItemPrice = Double.parseDouble(unitPrice);
                // the value from the spinner
                int newItemStocks = (Integer) spinnerForItemQuantity.getValue();
                
                list.insert(newItemName, newItemStocks, newItemPrice);
                //list.show();
                list.getItemList();
                
                int newListLength = list.length();
                
                //System.out.println("New list length: " + newListLength);
                
                try {
                    int i = 0;
                    
                    BufferedWriter writer1 = new BufferedWriter(new FileWriter("inventoryRecords.txt"));
                    
                    int itemCode = LinkedList.itemList[i].getItemCode();
                    String itemName = LinkedList.itemList[i].getItemName();
                    int itemStock = LinkedList.itemList[i].getItemStock();
                    double itemPrice = LinkedList.itemList[i].getItemPrice();

                    writer1.write(itemCode + ";" + itemName + ";" + itemStock + ";" + itemPrice);
                    writer1.close();
                    BufferedWriter writer2 = new BufferedWriter(new FileWriter("inventoryRecords.txt", true));
                    for (i = 1; i < newListLength; i++) {
                        itemCode = LinkedList.itemList[i].getItemCode();
                        itemName = LinkedList.itemList[i].getItemName();
                        itemStock = LinkedList.itemList[i].getItemStock();
                        itemPrice = LinkedList.itemList[i].getItemPrice();

                        writer2.append("\n" + itemCode + ";" + itemName + ";" + itemStock + ";" + itemPrice);
                    }
                    writer2.close();
                    
                    // every at the end of the operation, clear the lists and arrays.
                    list.clear();
                    list.clearItemList();
                }
                catch(IOException e) {
                    
                }
                
                JOptionPane.showMessageDialog(null, "Item added successfuly!");
                this.dispose();

            } catch (FormException FormE) {
                JOptionPane.showMessageDialog(null, "Please fill out all fields");
            }
        }
    }//GEN-LAST:event_buttonToAddActionPerformed

    private void inputForUnitPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputForUnitPriceKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_inputForUnitPriceKeyTyped

    private void inputForUnitPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputForUnitPriceKeyPressed
        // TODO add your handling code here:
                if (evt.getKeyChar() >= '0' && evt.getKeyChar() <= '9' || evt.getKeyChar() == '.' || evt.getKeyCode() == 8 || evt.getKeyCode() == 144) {
                } else {
                    JOptionPane.showMessageDialog(null, "Invalid input");
                    inputForUnitPrice.setText("");
                }
    }//GEN-LAST:event_inputForUnitPriceKeyPressed

    private void initializeRecord() throws FileNotFoundException {
        int i = 0;
        FileReader inputFile = new FileReader("inventoryRecords.txt");
        Scanner scan = new Scanner(inputFile);
        String tempString = "";

        while (scan.hasNextLine()) {
            tempString = scan.nextLine();
            String temp[] = tempString.split(";");

            String itemName = temp[1];
            int itemStocks = Integer.parseInt(temp[2]);
            double itemPrice = Double.parseDouble(temp[3]);

            list.insert(itemName, itemStocks, itemPrice);
        }
        
        int listLength = list.length();
        list.getItemList();
        
        for(i = 0; i < listLength; i++) {
            int itemCode = LinkedList.itemList[i].getItemCode();
            String itemName = LinkedList.itemList[i].getItemName();
            int itemStock = LinkedList.itemList[i].getItemStock();
            double itemPrice = LinkedList.itemList[i].getItemPrice();
            
            //System.out.println(itemCode + " " + itemName + " " + itemStock +  " " + itemPrice);
        }
    }
    
    // error handling
    class FormException extends Exception {

        String errStr; // describes the error 

        public FormException(String str) {
            errStr = str;
        }

        public String toString() {
            return errStr;
        }
    }

    private void handleErr(int error) throws FormException {
        String[] err = {"Please fill out all input fields"};
        throw new FormException(err[error]);
    }
     
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddItemDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddItemDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddItemDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddItemDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AddItemDialog dialog = new AddItemDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonToAdd;
    private javax.swing.JButton buttonToCancel;
    private javax.swing.JTextField inputForItemName;
    private javax.swing.JTextField inputForUnitPrice;
    private javax.swing.JLabel labelForAddItem;
    private javax.swing.JLabel labelForItemNameInput;
    private javax.swing.JLabel labelForItemQuantity;
    private javax.swing.JLabel labelForUnitPrice;
    private javax.swing.JPanel panelForAddItemContents;
    private javax.swing.JSpinner spinnerForItemQuantity;
    // End of variables declaration//GEN-END:variables
}
